install centos
clear			// To clear everything
yum clean all		// To check if yum working
yum update all		// To update in centos if any of update available
yum group list		// To check if development tool already installed
yum group list ids	// To list all pre installed tools
yum group install "Development Tools" // To install all development tools
whereis gcc		// To locate path of gcc
gcc --version		// To check version of gcc
pwd			// To identify current location
cd Desktop		// To set current path to Desktop
vim foo.c		// To create/edit file with name foo
:wq!			// To save file

Program for example in foo.c file:
#include<stdio.h>
int main(void){
	print("Hello World");
}

cc foo.c -o foo		// To compile foo.c file
./foo			// To run compiled file

updated file

#include<stdio.h>
#include<string.h>
int main()
{
    int I;
	FILE * fPtr;
	FILE * fp; //file write
	int i;
	char ch;
	char status[30];
				
    do
    {
        puts("Enter exit to quit or -dc or -dm or -rs to read file");
        printf("Enter your choice: ");
        scanf("%s",&status);
		if(strcmp(status, "exit") == 0){
			I = -1;
		}
		else if(strcmp(status, "-dc") == 0){
			I = 1;
		}
		else if(strcmp(status, "-dm") == 0){
			I = 2;
		}
		else if(strcmp(status, "-rs") == 0){
			I = 3;
		}
		else if(strcmp(status, "copy") == 0){
			I = 4;
		}
		else{
			I = 0;
		}
		
        switch(I)
        {
            case 1:
			/* 
			 * Open file in r (read) mode. 
			 * "data/file1.txt" is complete file path to read
			 */
			fPtr = fopen("config0.cnf", "r");


			/* fopen() return NULL if last operation was unsuccessful */
			if(fPtr == NULL)
			{
				/* Unable to open file hence exit */
				printf("Unable to open file.\n");
				printf("Please check whether file exists and you have read privilege.\n");
				//exit(EXIT_FAILURE);
			}


			/* File open success message */
			printf("Simulator Program \n");
			printf("================= \n\n");
			printf("Config File Display \n");
			printf("------------------- \n\n");

			do 
			{
				/* Read single character from file */
				ch = fgetc(fPtr);

				/* Print character read on console */
				putchar(ch);

			} while(ch != EOF); /* Repeat this if last read character is not EOF */


			/* Done with this file, close file to release resource */
			fclose(fPtr);
			printf("\n\n Simulator Program End.\n\n\n");
            break;
            case -1:
            puts("Bye");
            break;
			case 2:
                /* 
				 * Open file in r (read) mode. 
				 * "data/file1.txt" is complete file path to read
				 */
				fPtr = fopen("metadata_0.mdf", "r");


				/* fopen() return NULL if last operation was unsuccessful */
				if(fPtr == NULL)
				{
					/* Unable to open file hence exit */
					printf("Unable to open file.\n");
					printf("Please check whether file exists and you have read privilege.\n");
					//exit(EXIT_FAILURE);
				}


				/* File open success message */
				printf("Simulator Program \n");
				printf("================= \n\n");
				printf("Meta-Data File Display \n");
				printf("------------------- \n\n");

				do 
				{
					/* Read single character from file */
					ch = fgetc(fPtr);

					/* Print character read on console */
					putchar(ch);

				} while(ch != EOF); /* Repeat this if last read character is not EOF */


				/* Done with this file, close file to release resource */
				fclose(fPtr);
				printf("\n\n Simulator Program End.\n");
            break;
			case 3:
                /* 
				 * Open file in r (read) mode. 
				 * "data/file1.txt" is complete file path to read
				 */
				fPtr = fopen("runsimulator_0.cnf", "r");


				/* fopen() return NULL if last operation was unsuccessful */
				if(fPtr == NULL)
				{
					/* Unable to open file hence exit */
					printf("Unable to open file.\n");
					printf("Please check whether file exists and you have read privilege.\n");
					//exit(EXIT_FAILURE);
				}


				/* File open success message */
				printf("Simulator Program \n");
				printf("================= \n\n");
				printf("runSim called here \n");
				printf("------------------- \n\n");

				do 
				{
					/* Read single character from file */
					ch = fgetc(fPtr);

					/* Print character read on console */
					putchar(ch);

				} while(ch != EOF); /* Repeat this if last read character is not EOF */


				/* Done with this file, close file to release resource */
				fclose(fPtr);
				printf("\n\n Simulator Program End.\n");
            break;
			case 4:
			/* 
			 * Open file in r (read) mode. 
			 * "data/file1.txt" is complete file path to read
			 */
			fPtr = fopen("config0.cnf", "r");


			/* fopen() return NULL if last operation was unsuccessful */
			if(fPtr == NULL)
			{
				/* Unable to open file hence exit */
				printf("Unable to open file.\n");
				printf("Please check whether file exists and you have read privilege.\n");
				//exit(EXIT_FAILURE);
			}


			/* File open success message */
			printf("Simulator Program \n");
			printf("================= \n\n");
			printf("Config File Copy Display \n");
			printf("------------------- \n\n");

			

			do 
			{
				/* Read single character from file */
				ch = fgetc(fPtr);

			   /* open the file for writing*/
			  fp = fopen ("config0_copy.txt","w");
			   
				fprintf (fp, "%d\n",fPtr);
			  
			    
			   //fprintf (fp, "Entered:  %d\n");
			   
				/* Print character read on console */
				putchar(ch);

			} while(ch != EOF); /* Repeat this if last read character is not EOF */

			fclose (fp);
			/* Done with this file, close file to release resource */
			fclose(fPtr);
			printf("\n\n Simulator Program End.\n\n\n");
			break;
            default:
            printf("Select from given options \n\n\n");
			break;
        }
    }while(I != -1);
    return 0;
}


#include <stdio.h>
#define LEN 256
int main ()
{
   FILE * fp;
   int i;
   /* open the file for writing*/
   fp = fopen ("1.txt","w");
 
   /* write 10 lines of text into the file stream*/
   for(i = 0; i < 10;i++){
       fprintf (fp, "This is line %d\n",i + 1);
   }
 
   /* close the file*/  
   fclose (fp);
   return 0;
}


https://computing.llnl.gov/tutorials/pthreads/#Abstract
For Linux the correct command is:

gcc -o exefilename filename.c -lpthread
